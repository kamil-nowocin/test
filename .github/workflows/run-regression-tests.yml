name: CircleK WFE | Regression Testing

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

run-name: "üë∑üöß[#${{ github.run_number }}][TEST] Executing tests${{ github.event_name != 'schedule' && ' of ' || '' }}${{ github.event_name != 'schedule' && github.event.inputs.testModule || '' }} on ${{ github.event_name == 'schedule' && 'UAT (PROD-1)' || github.event.inputs.testEnvironment }}üåç"

on:
  #  schedule:
  #    - cron: "00 6 * * 1-5" # 8:00 CEST - WFE_service-okta-auth
  #    - cron: "00 7 * * 1-5" # 9:00 CEST - WFE_service-mastercard

  workflow_dispatch:
    inputs:
      testModule:
        description: "Select the WEB module:"
        required: true
        type: choice
        options:
          - "WFE_All"
          - "WFE_Websters"
          - "WFE_Klasters"
      testEnvironment:
        description: "Select the WEB environment:"
        required: true
        type: choice
        options:
          - "PROD"
          - "UAT (PROD-1)"
          - "INTG (PROD-2)"
          - "DEV"
      testGroup:
        description: "Select the WEB test group:"
        required: true
        type: choice
        options:
          - "ALL"
          - "REGRESSION"
          - "SMOKE"
      enablePKCE:
        description: "Enable PKCE?"
        required: true
        type: choice
        options:
          - "NO"
          - "YES"
      enableTestRetry:
        description: "Enable re-run of failing tests?"
        required: true
        default: false
        type: boolean
      enableXrayReport:
        description: "Upload test results to Jira XRay?"
        required: true
        default: false
        type: boolean
      enableSlackReport:
        description: "Upload test results to Slack?"
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    name: "Build & Execute Tests üõ†Ô∏è"
    env:
      TEST_ENVIRONMENT: ${{ github.event_name == 'schedule' && 'UAT' || github.event.inputs.testEnvironment }}
      ENABLE_PKCE: ${{ github.event_name == 'schedule' && 'false' || (github.event.inputs.enablePKCE == 'YES' && 'true' || 'false') }}
      ENABLE_TEST_RETRY: ${{ github.event_name == 'schedule' && 'false' || github.event.inputs.enableTestRetry }}
      ENABLE_XRAY_REPORT: ${{ github.event_name == 'schedule' && 'false' || github.event.inputs.enableXrayReport }}
      ENABLE_SLACK_REPORT: ${{ github.event_name == 'schedule' && 'false' || github.event.inputs.enableSlackReport }}
      XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
      XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}
      SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      BUILD_NUMBER: ${{ github.run_number }}
      TEST_MODULES:
      TEST_MODULE:
      GRADLE_TASK:

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Set up Java"
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: "Cache Gradle packages"
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: "Grant execute permission for gradlew"
        run: chmod +x ./gradlew

      - name: "Grant execute permission for all scripts in .github/scripts"
        run: chmod +x ${{ github.workspace }}/.github/scripts/*

      - name: "Determine WFE Test Module"
        run: ${{ github.workspace }}/.github/scripts/determine_module.sh
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_INPUTS_TEST_MODULE: ${{ github.event.inputs.testModule }}
        shell: bash

      - name: "üö® Run ${{ env.TEST_MODULE }} Tests üö®"
        run: ${{ github.workspace }}/.github/scripts/run_tests.sh
        env:
          GRADLE_TASK: ${{ env.GRADLE_TASK }}
          TEST_MODULE: ${{ env.TEST_MODULE }}
          TEST_ENVIRONMENT: ${{ env.TEST_ENVIRONMENT }}
          ENABLE_PKCE: ${{ env.ENABLE_PKCE }}
          ENABLE_TEST_RETRY: ${{ env.ENABLE_TEST_RETRY }}
          ENABLE_XRAY_REPORT: ${{ env.ENABLE_XRAY_REPORT }}
          ENABLE_SLACK_REPORT: ${{ env.ENABLE_SLACK_REPORT }}
          GITHUB_EVENT_INPUTS_TEST_GROUP: ${{ github.event.inputs.testGroup }}
        shell: bash

      - name: "Process TestNG results"
        run: ${{ github.workspace }}/.github/scripts/process_testng_results.sh
        env:
          TEST_MODULES: ${{ env.TEST_MODULES }}
        shell: bash

      - name: "Upload TestNG results artifact"
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.TEST_MODULE }}-testng-report"
          path: artifacts/
          retention-days: 5

      - name: "Upload Allure Report results artifact"
        uses: actions/upload-artifact@v4
        with:
          name: "allure-results"
          path: build/allure-results
          retention-days: 5

  publish-report:
    needs: build
    runs-on: ubuntu-latest
    name: "Generate Allure Report üìä"
    steps:
      - name: "Download Allure Report results artifact"
        uses: actions/download-artifact@v4
        with:
          name: "allure-results"
          path: allure-results

      - name: "Load Allure Report history"
        if: github.ref == 'refs/heads/master' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: "Build Allure Report"
        if: github.ref == 'refs/heads/master' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: simple-elf/allure-report-action@master
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: allure-results
          keep_reports: 20

      - name: "Publish Allure Report"
        if: github.ref == 'refs/heads/master' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history
          commit_message: "[WFE-ü§ñ] Automated deployment of Allure Report | ${{ github.run_number }}"

  cleanup:
    needs: publish-report
    runs-on: ubuntu-latest
    name: "Cleanup üóëÔ∏è"
    permissions: write-all
    steps:
      - name: "Delete GitHub Pages deployments"
        uses: strumwolf/delete-deployment-environment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: github-pages
          onlyRemoveDeployments: true
